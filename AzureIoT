Once that’s done, we need to install dependencies on the Raspberry Pi to communicate with the DHT11 sensor and to make the communication process easy for Azure IoT services. For that open up a Raspberry Pi Terminal to install the dependent packages used in the project.

First, we need to download the DHT library for Raspberry Pi, then extract it from the root folder and run the following command to install it.

        sudo python setup.py install
After successful installation, run the following commands to install all the dependent packages on Azure IoT Hub.

sudo pip3 install azure-iot-device  
sudo pip3 install azure-iot-hub  
sudo pip3 install azure-iothub-service-client  
sudo pip3 install azure-iothub-device-client  

Once we have completed installing all the prerequisites, it’s time to write the code in Python. To do that, first import all the libraries:

import random  
import Adafruit_DHT
import time
from azure.iot.device import IoTHubDeviceClient, Message
In this project, we are using pin 4 of the Raspberry Pi to process the data from the DHT11 data, so it needs to be declared as shown.

sensor = Adafruit_DHT.DHT11
pin = 4
Next, we define the connection string of the code. Replace it with your device-primary connection string that we saved earlier.

CONNECTION_STRING = "HostName=sensordata.azure-devices.net;DeviceId=ZZZZZ;SharedAccessKey=ZZZZZZZZZZZZZZZZZZ"  
Next, we create An array that will be used to send the data to Azure IoT Hub. It can be done as shown below.

MSG_SND = '{{"temperature": {temperature},"humidity": {humidity}}}'  
Next, we have defined a while loop, In the while loop, both humidity and temperature data are processed using the Adafruit_DHT.read_retry function. Furthermore, we define two special variables and assign the output data to those variables.

while True:
    humidity, temperature = Adafruit_DHT.read_retry(sensor, pin)
Next, a function is written to connect the IoT Hub using the connection parameters that we have previously defined.

    def iothub_client_init():  
        client = IoTHubDeviceClient.create_from_connection_string(CONNECTION_STRING)  
        return client  
Finally, in the next step, both the Temperature and Humidity data is sent to Azure Hub, using the format as shown in the code below. Also, we used a try and catch method to identify if there is any error in the code.

    def iothub_client_telemetry_sample_run():  
        try:  
            client = iothub_client_init()  
            print ( "Sending data to IoT Hub, press Ctrl-C to exit" )  
            while True:  
                msg_txt_formatted = MSG_SND.format(temperature=temperature, humidity=humidity)  
                message = Message(msg_txt_formatted)  
                print( "Sending message: {}".format(message) )  
                client.send_message(message)  
                print ( "Message successfully sent" )  
                time.sleep(3)  
